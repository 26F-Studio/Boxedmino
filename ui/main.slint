import { TabWidget, Button, Switch, ScrollView, Palette, StandardButton, ProgressIndicator, LineEdit } from "std-widgets.slint";

struct Settings {
    sandboxed: bool,
    clear_temp_dir: bool,
    import_save_on_play: bool,
    repo_initialized: bool,
    game_repo_path: string,
}

component BoxedminoBanner {
    HorizontalLayout {
        alignment: LayoutAlignment.center;
        spacing: 8px;
        visible: true;
        Image {
            width: 36px;
            height: 36px;
            source: @image-url("icons/boxedmino.svg");
        }

        Text {
            accessible-role: AccessibleRole.text;
            horizontal-alignment: TextHorizontalAlignment.center;
            overflow: TextOverflow.elide;
            text: "Boxedmino";
            vertical-alignment: TextVerticalAlignment.center;
            font-size: 24px;
        }
    }
}

export component MainWindow inherits Window {
    callback open_link(string);
    callback open_game(string);
    callback copy_text(string);
    callback clear_save_dir();
    callback open_save_dir();
    callback browse_for_repo();
    pure callback apply_settings(Settings);
    //              array, searched_str -> matched
    pure callback filter([string], string) -> [string];

    in property <string> sandbox_path;
    in-out property <[string]> versions: ["Uninitialized A", "Uninitialized B", "Uninitialized C", "Uninitialized D"];
    in-out property <[string]> matched_versions: versions;
    in-out property <string> selected_version: "Uninitialized A";
    in-out property <Settings> settings: {
        sandboxed: true,
        clear_temp_dir: true,
        import_save_on_play: false,
        game_repo_path: "",
    };
    in property <bool> is_wayland_used: false;
    private property <string> searched_string: "";

    title: "Boxedmino";
    TabWidget {
        Tab {
            title: "Home";
            VerticalLayout {
                alignment: LayoutAlignment.center;
                padding: 16px;
                spacing: 8px;
                Text {
                    text: "Choose game version";
                    font-size: 1.25rem;
                    horizontal-alignment: TextHorizontalAlignment.center;
                }
                LineEdit {
                    width: 100%;
                    height: 2.718rem;
                    text: searched_string;
                    placeholder-text: "Search...";
                    edited => {
                        searched_string = self.text;
                        matched_versions = filter(versions, searched_string);
                    }
                }
                ScrollView {
                    width: 100%;
                    min-height: 8rem;
                    preferred-height: 2626262626rem;
                    padding-left: 8rem;

                    VerticalLayout {
                        width: 100%;
                        padding-top: 6px;
                        padding-bottom: 6px;
                        accessible-role: AccessibleRole.list;
                        alignment: LayoutAlignment.center;

                        for version in matched_versions: Rectangle {
                            width: 100%;
                            accessible-role: AccessibleRole.button;
                            accessible-checkable: true;
                            accessible-checked: version == selected_version;
                            background: {
                                if (version == selected_version) {
                                    return Palette.selection-background;
                                }
                                if (area.has-hover) {
                                    return Palette.alternate-background
                                        .mix(Palette.selection-background, 0.5);
                                }
                                return Palette.alternate-background;
                            }
                            
                            area := TouchArea {
                                clicked => { selected_version = version; }
                            }

                            Text {
                                width: parent.width;
                                text: version;
                                min-height: 2rem;
                                horizontal-alignment: TextHorizontalAlignment.left;
                                vertical-alignment: TextVerticalAlignment.center;
                                color: {
                                    if (version == selected_version) {
                                        return Palette.selection-foreground;
                                    }
                                    return Palette.foreground;
                                }
                            }
                        }
                    }
                }
                Button {
                    text: "Open game";
                    // TODO: Warning if old version of game is run unsandboxed
                    clicked => { open_game(selected_version); }
                }
            }
        }
        Tab {
            title: "Settings";
            VerticalLayout {
                alignment: LayoutAlignment.center;
                padding: 16px;
                spacing: 4px;
                Text {
                    text: "Settings";
                    font-size: 1.25rem;
                    horizontal-alignment: TextHorizontalAlignment.center;
                }
                HorizontalLayout {
                    alignment: LayoutAlignment.space-between;
                    spacing: 8px;
                    padding: 4px;
                    VerticalLayout {
                        Text {
                            text: "Enable sandboxed";
                            font-size: 1.25rem;
                        }
                        Text {
                            text: "Alter the game to change the save directory.";
                            font-size: 0.96rem;
                        }
                    }
                    Switch {
                        checked: settings.sandboxed;
                        toggled => { settings.sandboxed = self.checked; }
                    }
                }
                HorizontalLayout {
                    alignment: LayoutAlignment.space-between;
                    spacing: 8px;
                    padding: 4px;
                    VerticalLayout {
                        Text {
                            text: "Clear temp dir on play";
                            font-size: 1.25rem;
                        }
                        Text {
                            text: "Delete the temporary directory before opening the game.";
                            font-size: 0.96rem;
                        }
                    }
                    Switch {
                        checked: settings.clear_temp_dir;
                        toggled => { settings.clear_temp_dir = self.checked; }
                    }
                }
                HorizontalLayout {
                    alignment: LayoutAlignment.space-between;
                    spacing: 8px;
                    padding: 4px;
                    VerticalLayout {
                        Text {
                            text: "Import save on play";
                            font-size: 1.25rem;
                        }
                        Text {
                            text: "Try to transfer your main save to the sandboxed game.";
                            font-size: 0.96rem;
                        }
                    }
                    Switch {
                        checked: settings.import_save_on_play;
                        toggled => { settings.import_save_on_play = self.checked; }
                    }
                }
                HorizontalLayout {
                    alignment: LayoutAlignment.space-between;
                    spacing: 8px;
                    padding: 4px;
                    VerticalLayout {
                        Text {
                            text: "Sandboxed save directory";
                            font-size: 1.25rem;
                        }
                        Text {
                            text: "The place the sandboxed game will save to.";
                            font-size: 0.96rem;
                        }
                    }
                    HorizontalLayout {
                        spacing: 8px;
                        if (!is_wayland_used) : Button {
                            text: "Copy";
                            clicked => { copy_text(sandbox_path); }
                        }
                        Button {
                            text: "Open";
                            clicked => { open_save_dir(); }
                        }
                        Button {
                            text: "Clear";
                            // TODO: Clear save dir callback
                            clicked => { clear_save_dir(); }
                        }
                    }
                }
                VerticalLayout {
                    spacing: 8px;
                    padding: 4px;
                    VerticalLayout {
                        Text {
                            text: "Game repo path";
                            font-size: 1.25rem;
                        }
                        Text {
                            text: "The game source code folder containing main.lua.";
                            font-size: 0.96rem;
                        }
                    }
                    HorizontalLayout {
                        LineEdit {
                            width: 100%;
                            height: 3.14rem;
                            text: settings.game_repo_path;
                            placeholder-text: "Path to game repo";
                            edited => {
                                settings.game_repo_path = self.text;
                            }
                        }
                        Button {
                            max-width: 5rem;
                            horizontal-stretch: 0;
                            text: "Browse...";
                            clicked => { browse_for_repo(); }
                        }
                    }
                }
                VerticalLayout {
                    padding-top: 8px;
                    Button {
                        text: "Apply";
                        clicked => { apply_settings(settings); }
                    }
                }
            }
        }
        Tab {
            title: "About";
            VerticalLayout {
                alignment: LayoutAlignment.center;
                padding: 16px;
                spacing: 4px;
                BoxedminoBanner {}
                HorizontalLayout {
                    alignment: LayoutAlignment.center;
                    VerticalLayout {
                        alignment: LayoutAlignment.center;
                        spacing: 8px;
                        Text {
                            text: "Sandboxed Techmino runner";
                            horizontal-alignment: TextHorizontalAlignment.center;
                            font-size: 1.25rem;
                        }
                        Text {
                            text: "(C) 26F-Studio - 2024";
                            accessible-role: AccessibleRole.text;
                            horizontal-alignment: TextHorizontalAlignment.center;
                        }
                        Text {
                            text: "This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.";
                            accessible-role: AccessibleRole.text;
                            wrap: TextWrap.word-wrap;
                            width: 36rem;
                        }
                        Text {
                            text: "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.";
                            accessible-role: AccessibleRole.text;
                            wrap: TextWrap.word-wrap;
                            width: 36rem;
                        }
                        Text {
                            text: "You should have received a copy of the GNU General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.  ";
                            accessible-role: AccessibleRole.text;
                            wrap: TextWrap.word-wrap;
                            width: 36rem;
                        }
                    }
                }
                HorizontalLayout {
                    alignment: LayoutAlignment.center;
                    padding-top: 12px;
                    spacing: 8px;
                    Button {
                        text: "License";
                        clicked => { open_link("https://www.gnu.org/licenses/"); }
                    }
                    Button {
                        text: "Source code";
                        clicked => { open_link("https://github.com/26F-Studio/Boxedmino"); }
                    }
                }
            }
        }
    }
}

export component ErrorWindow inherits Dialog {
    callback dismiss();
    in property <string> error_message: "An error occurred.";
    in property <string> error_details: "No details available.";
    in property <string> error_title: "Boxedmino - Error";

    title: error_title;
    
    VerticalLayout {
        alignment: LayoutAlignment.space-between;
        padding: 16px;
        spacing: 16px;
        HorizontalLayout {
            alignment: LayoutAlignment.start;
            spacing: 16px;
            VerticalLayout {
                alignment: LayoutAlignment.center;
                Image {
                    width: 36px;
                    height: 36px;
                    source: @image-url("icons/error.svg");
                    colorize: red;
                }
            }
            VerticalLayout {
                alignment: LayoutAlignment.start;
                spacing: 8px;
                VerticalLayout {
                    alignment: LayoutAlignment.start;
                    spacing: 4px;
                    Text {
                        text: "Error";
                        font-size: 1.25rem;
                        font-weight: 700;
                    }
                    Text {
                        text: error_message;
                        font-size: 1.125rem;
                    }
                }
                Text {
                    text: error_details;
                    font-size: 1rem;
                    wrap: TextWrap.word-wrap;
                    max-width: 36rem;
                }
            }
        }
        StandardButton {
            kind: close;
            clicked => { dismiss(); }
        }
    }
}

export component SetupWindow inherits Window {
    callback finish();
    callback change_path(string);
    callback clone_repo(string);
    callback browse_for_repo() -> string;
    callback open_link(string);

    in property <bool> repo_valid: false;
    in property <bool> dir_empty: false;
    in-out property <string> game_repo_path: "";

    title: "Boxedmino - Setup";

    VerticalLayout {
        alignment: LayoutAlignment.center;
        padding: 16px;
        spacing: 32px;
        BoxedminoBanner {}
        VerticalLayout {
            spacing: 8px;
            Text {
                text: "Welcome to Boxedmino!";
                font-size: 1.25rem;
                font-weight: 700;
                horizontal-alignment: TextHorizontalAlignment.center;
            }
            Text {
                text: "To run Boxedmino, you need to set up the game's Git repository.";
                font-size: 1.25rem;
                horizontal-alignment: TextHorizontalAlignment.center;
            }
            Text {
                text: "If you already have it, you can enter the path below.\nIf you don't, you can enter the path where you want to initialize it.\nYou can only initialize it on an empty directory.";
                font-size: 1rem;
                horizontal-alignment: TextHorizontalAlignment.center;
            }
        }
        VerticalLayout {
            spacing: 8px;
            VerticalLayout {
                Text {
                    text: "Path to repository";
                }
                HorizontalLayout {
                    spacing: 8px;
                    game_repo_path_input := LineEdit {
                        width: 100%;
                        height: 3.14rem;
                        text: game_repo_path;
                        placeholder-text: "Path to game repo";
                        edited => {
                            game_repo_path = self.text;
                            change_path(game_repo_path);
                        }
                    }
                    browse_button := Button {
                        max-width: 5rem;
                        horizontal-stretch: 0;
                        text: "Browse...";
                        clicked => {
                            game_repo_path = browse_for_repo();
                            game_repo_path_input.text = game_repo_path;
                            change_path(game_repo_path);
                        }
                    }
                }
            }
            HorizontalLayout {
                Button {
                    text: "Download repo here";
                    enabled: dir_empty;
                    clicked => { clone_repo(game_repo_path); }
                }
                Button {
                    text: "Finish setup";
                    enabled: repo_valid;
                    clicked => { finish(); }
                }
            }
            if (!dir_empty): Text {
                text: "Cannot download here as the directory is not empty.";
            }
            if (!repo_valid): Text {
                text: "Cannot finish setup yet as the directory is not a valid Git repository.";
            }
        }
    }
}

export component GitCloneWaitWindow inherits Window {
    callback dismiss();
    in property <bool> finished: true;

    title: "Boxedmino - Git clone";

    VerticalLayout {
        alignment: LayoutAlignment.center;
        padding: 1rem;
        spacing: 1.25rem;
        Text {
            text: "Git clone in progress";
            font-size: 1.25rem;
            font-weight: 700;
        }
        Text {
            text: {
                if (finished) {
                    "Git clone finished! Press the button below to close this window.";
                } else {
                    "We are currently running downloading the repository, " +
                    "but we could not find your terminal application. " +
                    "As such, we cannot show the progress of this operation. " +
                    "Please wait until the operation finishes.";
                }
            }
            width: 25rem;
            height: 6rem;
        }
        ProgressIndicator {
            indeterminate: !finished;
            progress: 1;
        }
        HorizontalLayout {
            alignment: LayoutAlignment.center;
            Rectangle {
                width: 6rem;
                height: 3rem;
                border-color: {
                    if (finished) {
                        return @radial-gradient(circle, 
                            transparent 0%,
                            transparent 92.6%,
                            yellow 92.7%
                        );
                    }
                    return transparent;
                }
                border-width: 2px;
                StandardButton {
                    kind: close;
                    enabled: finished;
                    clicked => { dismiss(); }
                }
            }
        }
    }
}